[{
	"formatter": {
		"className": "com.tr.search.search.SearchFormatter",
		"filePath": "N/A",
		"param": {
			"IsNotNull": {
				"IsQuoteOf": "HasQuotes"
			},
			"dicts": [],
			"docid": ["quote.a.fxirQuoteId"],
			"dociddelimiter": "|",
			"fanout": {
				
			},
			"fanout-agg": {
				
			},
			"mapper-array": {
				
			},
			"mapper": {
				"assetClassFanout.chinese.v": "RCSAssetCategoryLeafZhHans",
				"assetClassFanout.chinese_genealogy.v": "RCSAssetCategoryNameZh",
				"assetClassFanout.english.v": "RCSAssetCategoryLeaf",
				"assetClassFanout.english_genealogy.v": "RCSAssetCategoryName",
				"assetClassFanout.japanese.v": "RCSAssetCategoryLeafJaHani",
				"assetClassFanout.japanese_genealogy.v": "RCSAssetCategoryNameJa",
				"assetClassFanout.multilanguage_genealogy.v": "RCSAssetCategoryNameML",
				"assetClassFanout.multilanguages.v": "RCSAssetCategoryLeafML",
				"assetClassFanout.qcode.v": "RCSAssetCategory",
				"assetClassFanout.qcode_genealogy.v": "RCSAssetCategoryGenealogy",
				"contributor.DS_ContributorCommonName.v": "ContributorCommonName",
				"contributor.DS_ContributorLocationCode.v": "ContributorLocationCity",
				"contributor.DS_ExchangeCode.v": "ExchangeCode",
				"contributor.DS_ExchangeCountryCode.v": "ExchangeCountry",
				"contributor.DS_ExchangeName.v": "ExchangeName",
				"contributor.DS_IsExchangeTradable.v": "IsExchangeTradable",
				"contributorCountryFanout.chinese.v": "RCSContributorLocationLeafZh",
				"contributorCountryFanout.english.v": "RCSContributorLocationLeaf",
				"contributorCountryFanout.english_genealogy.v": "RCSContributorLocationName",
				"contributorCountryFanout.japanese.v": "RCSContributorLocationLeafJa",
				"contributorCountryFanout.multilanguage_genealogy.v": "RCSContributorLocationNameML",
				"contributorCountryFanout.multilanguages.v": "RCSContributorLocationLeafML",
				"contributorCountryFanout.qcode.v": "RCSContributorLocation",
				"contributorCountryFanout.qcode_genealogy.v": "RCSContributorLocationGenealogy",
				"contributorTypeFanout.chinese.v": "RCSContributorTypeLeafZh",
				"contributorTypeFanout.english.v": "RCSContributorTypeLeaf",
				"contributorTypeFanout.japanese.v": "RCSContributorTypeLeafJa",
				"contributorTypeFanout.multilanguages.v": "RCSContributorTypeLeafML",
				"contributorTypeFanout.qcode.v": "RCSContributorType",
				"contributorTypeFanout.qcode_genealogy.v": "RCSContributorTypeGenealogy",
				"curveSubTypeFanout.english.v": "RCSCurveTypeLeaf",
				"curveSubTypeFanout.english_genealogy.v": "RCSCurveTypeName",
				"curveSubTypeFanout.multilanguage_genealogy.v": "RCSCurveTypeNameML",
				"curveSubTypeFanout.multilanguages.v": "RCSCurveTypeLeafML",
				"curveSubTypeFanout.qcode.v": "RCSCurveType",
				"curveSubTypeFanout.qcode_genealogy.v": "RCSCurveTypeGenealogy",
				"exchangeCountryFanout.english.v": "RCSExchangeCountryLeaf",
				"exchangeCountryFanout.english_genealogy.v": "RCSExchangeCountryName",
				"exchangeCountryFanout.multilanguage_genealogy.v": "RCSExchangeCountryNameML",
				"exchangeCountryFanout.multilanguages.v": "RCSExchangeCountryLeafML",
				"exchangeCountryFanout.qcode.v": "RCSExchangeCountry",
				"exchangeCountryFanout.qcode_genealogy.v": "RCSExchangeCountryGenealogy",
				"fd1.Description.v": "Leg1UnderlyingFrequency",
				"fd2.Description.v": "Leg2UnderlyingFrequency",
				"firstCurrency.a.currencyId": "FirstCurrencyPermId",
				"firstCurrencyExtIdentifier.IdentifierValue.v": "FirstCurrencyISOExt",
				"firstCurrencyFanout.chinese.v": "RCSFirstCurrencyLeafZh",
				"firstCurrencyFanout.english.v": "RCSFirstCurrencyLeaf",
				"firstCurrencyFanout.japanese.v": "RCSFirstCurrencyLeafJa",
				"firstCurrencyFanout.multilanguages.v": "RCSFirstCurrencyLeafML",
				"firstCurrencyFanout.qcode.v": "RCSFirstCurrency",
				"firstCurrencyIdentifier.IdentifierValue.v": "FirstCurrencyISO",
				"undlyLeg2.FxirUndlyCpnCalcMethod.v": "Leg2UnderlyingCpnCalcMethod",
				"undlyLeg2.FxirUndlyIborType.v": "Leg2UnderlyingIborType",
				"undlyLeg2.FxirUndlyType.v": "Leg2UnderlyingType",
				"undlyLeg2.FxirUndlyUnderlyingRIC.v": "Leg2UnderlyingRIC",
				"iborTypeFanout.english.v": "RCSIborFixingTypeLeaf",
				"iborTypeFanout.multilanguages.v": "RCSIborFixingTypeLeafML",
				"iborTypeFanout.qcode.v": "RCSIborFixingType",
				"instrument.FxirInstrTenorId.v": "TermMaturity",
				"instrument.FxirInstrTenorType.v": "TenorType",
				"instrument.a.fxirInstrumentId": "BaseInstrumentPermId",
				"instrumentIdentifier.IdentifierValue.v": "RicRoot",
				"parentChainVehicle.a.vehicleId": "BaseCurveTilePermId",
				"priceTypeFanout.chinese.v": "RCSPriceTypeLeafZh",
				"priceTypeFanout.english.v": "RCSPriceTypeLeaf",
				"priceTypeFanout.japanese.v": "RCSPriceTypeLeafJa",
				"priceTypeFanout.multilanguages.v": "RCSPriceTypeLeafML",
				"priceTypeFanout.qcode.v": "RCSPriceType",
				"priceTypeFanout.qcode_genealogy.v": "RCSPriceTypeGenealogy",
				"primaryInstrument.a.fxirInstrumentId": "_IsPrimaryQuote",
				"quote.FxirQuoteContributorCode.v": "ContributorCode",
				"quote.FxirQuoteContributorType.v": "ContributorType",
				"quote.FxirQuoteIsOffShore.v": "IsOffShoreQuote",
				"quote.FxirQuoteLongDisplayName.v": "CommonName",
				"quote.FxirQuotePermissionableEntity.v": "PO",
				"quote.FxirQuotePriceSourceCode.v": "PriceSourceCode",
				"quote.FxirQuotePriceType.v": "PriceType",
				"quote.FxirQuoteScalingFactor.v": "ScalingFactor",
				"quote.FxirQuoteShortDisplayName.v": "ShortName",
				"quote.a.fxirQuoteId": "PI",
				"rateTypeFanout.english.v": "RCSCurveRateTypeLeaf",
				"rateTypeFanout.multilanguages.v": "RCSCurveRateTypeLeafML",
				"rateTypeFanout.qcode.v": "RCSCurveRateType",
				"secondCurrencyExtIdentifier.IdentifierValue.v": "SecondCurrencyISOExt",
				"secondCurrencyFanout.chinese.v": "RCSSecondCurrencyLeafZh",
				"secondCurrencyFanout.english.v": "RCSSecondCurrencyLeaf",
				"secondCurrencyFanout.japanese.v": "RCSSecondCurrencyLeafJa",
				"secondCurrencyFanout.multilanguages.v": "RCSSecondCurrencyLeafML",
				"secondCurrencyFanout.qcode.v": "RCSSecondCurrency",
				"secondCurrencyIdentifier.IdentifierValue.v": "SecondCurrencyISO",
				"structure.FxirStructAssetClassId.v": "RCSAssetClassId",
				"structure.FxirStructCrossAttrs.FxirStructCrossAttr.FxirStructCrossAttrCrossRateDecimals.v": "CrossDecimalPointConvention",
				"structure.FxirStructCrossAttrs.FxirStructCrossAttr.FxirStructCrossAttrSwapPointDecimals.v": "SwapDecimalPointConvention",
				"structure.FxirStructCrossAttrs.FxirStructCrossAttr.FxirStructCrossAttrSwapPointScaling.v": "ScalingFactorConvention",
				"structure.FxirStructCurrencies.FxirStructCurrency.FxirStructCurAttrs.FxirStructCurAttr.a.fxirStructCurAttrIsOffShore": "IsOffShoreStructure",
				"structure.FxirStructCurveSubType.v": "CurveType",
				"structure.FxirStructIborType.v": "IborFixingType",
				"structure.FxirStructLongDisplayName.v": "StructureCommonName",
				"structure.FxirStructMrkConventionFl.v": "IsConvention",
				"structure.FxirStructNonDeliverableFl.v": "IsNonDeliverableStructure",
				"structure.FxirStructRateType.v": "CurveRateType",
				"structure.FxirStructTenorType.v": "StructTenorType",
				"structure.FxirStructureScore.v": "StructureScore",
				"structure.a.fxirStructureId": "BaseStructurePermId",
				"tenorFanout.english.v": "RCSStructTenorLeaf",
				"tenorFanout.english_genealogy.v": "RCSStructTenorName",
				"tenorFanout.multilanguage_genealogy.v": "RCSStructTenorNameML",
				"tenorFanout.multilanguages.v": "RCSStructTenorLeafML",
				"tenorFanout.qcode.v": "RCSStructTenor",
				"tenorFanout.qcode_genealogy.v": "RCSStructTenorGenealogy",
				"tenorFanout.ranking.v": "RCSStructTenorRank",
				"tenorIdFanout.english.v": "RCSInstrTenorLeaf",
				"tenorIdFanout.english_genealogy.v": "RCSInstrTenorName",
				"tenorIdFanout.multilanguage_genealogy.v": "RCSInstrTenorNameML",
				"tenorIdFanout.multilanguages.v": "RCSInstrTenorLeafML",
				"tenorIdFanout.qcode.v": "RCSInstrTenor",
				"tenorIdFanout.qcode_genealogy.v": "RCSInstrTenorGenealogy",
				"tenorIdFanout.ranking.v": "RCSInstrTenorRank",
				"tenorTypeFanout.english.v": "RCSTenorTypeLeaf",
				"tenorTypeFanout.multilanguages.v": "RCSTenorTypeLeafML",
				"tenorTypeFanout.qcode.v": "RCSTenorType",
				"undlyLeg1.FxirUndlyCpnCalcMethod.v": "Leg1UnderlyingCpnCalcMethod",
				"undlyLeg1.FxirUndlyIborType.v": "Leg1UnderlyingIborType",
				"undlyLeg1.FxirUndlyType.v": "Leg1UnderlyingType",
				"undlyLeg1.FxirUndlyUnderlyingRIC.v": "Leg1UnderlyingRIC",
				"vehicleChain.FxirChainType.v": "ChainType",
				"vehicleChain.FxirChainVehicleId.v": "BaseCurvePermId",
				"vehicleIdentifier.IdentifierValue.v": "RIC",
				"contrLoc.TimeZoneUniqueName.v": "ContributorLocationCityName",
				"bankGuide.BankGuideID.v": "BankGuideID"
			},
			"pipeline": {
				"definition": {
					"description": "this is a simple pipeline for document processing",
					"processors": [{
						"set": {
							"field": "BusinessEntity",
							"value": "STIR"
						}
					},
					{
						"set": {
							"field": "SearchTypeBase",
							"value": 262144
						}
					},
					{
						"set": {
							"field": "HasTimeSeries",
							"value": true
						}
					},
					{
						"set": {
							"field": "EntityTypeName",
							"value": "Quote"
						}
					},
					{
						"set": {
							"field": "EntityTypeCode",
							"value": 1
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "FirstCurrency",
							"target_rule": "CommonUDF.getFirst(doc.FirstCurrencyISO, doc.FirstCurrencyISOExt)"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "SecondCurrency",
							"target_rule": "CommonUDF.getFirst(doc.SecondCurrencyISO, doc.SecondCurrencyISOExt)"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "IsPrimaryQuote",
							"target_rule": "CommonUDF.exists(doc._IsPrimaryQuote)"
						}
					},
					{
						"remove": {
							"field": "_IsPrimaryQuote"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "DelayedQuoteRIC",
							"target_rule": "StringJoin.nonEmpty(\'\',\'/\', doc.RIC)"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermStartLeaf",
							"target_rule": "if(doc.TenorType==\'FRAL\') doc.RCSInstrTenorLeaf; else if(doc.StructTenorType!=\'FRAT\') doc.RCSStructTenorLeaf;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermStart",
							"target_rule": "if(doc.TenorType==\'FRAL\') doc.RCSInstrTenor; else if(doc.StructTenorType!=\'FRAT\') doc.RCSStructTenor;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermMaturityName",
							"target_rule": "if(doc.StructTenorType==\'FRAL\') doc.RCSStructTenorName; else if(doc.TenorType!=\'FRAT\') doc.RCSInstrTenorName;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermMaturityLeafML",
							"target_rule": "if(doc.StructTenorType==\'FRAL\') doc.RCSStructTenorLeafML; else if(doc.TenorType!=\'FRAT\') doc.RCSInstrTenorLeafML;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermStartLeafML",
							"target_rule": "if(doc.TenorType==\'FRAL\') doc.RCSInstrTenorLeafML; else if(doc.StructTenorType!=\'FRAT\') doc.RCSStructTenorLeafML;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermMaturityLeaf",
							"target_rule": "if(doc.StructTenorType==\'FRAL\') doc.RCSStructTenorLeaf; else if(doc.TenorType!=\'FRAT\') doc.RCSInstrTenorLeaf;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermMaturityGenealogy",
							"target_rule": "if(doc.StructTenorType==\'FRAL\') doc.RCSStructTenorGenealogy; else if(doc.TenorType!=\'FRAT\') doc.RCSInstrTenorGenealogy;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermMaturity",
							"target_rule": "if(doc.StructTenorType==\'FRAL\') doc.RCSStructTenor; else if(doc.TenorType!=\'FRAT\') doc.RCSInstrTenor;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSTermMaturityNameML",
							"target_rule": "if(doc.StructTenorType==\'FRAL\') doc.RCSStructTenorNameML; else if(doc.TenorType!=\'FRAT\') doc.RCSInstrTenorNameML;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "PermID",
							"target_rule": "doc.PI"
						}
					},
					{
						"substring": {
							"field": "RCSPriceType",
							"tag": "copy process",
							"target_field": "RCSQuoteType"
						}
					},
					{
						"substring": {
							"field": "RCSPriceTypeLeafML",
							"tag": "copy process",
							"target_field": "RCSQuoteTypeLeafML"
						}
					},
					{
						"substring": {
							"field": "RCSPriceTypeGenealogy",
							"tag": "copy process",
							"target_field": "RCSQuoteTypeGenealogy"
						}
					},
					{
						"substring": {
							"field": "RCSPriceTypeLeaf",
							"tag": "copy process",
							"target_field": "RCSQuoteTypeLeaf"
						}
					},
					{
						"substring": {
							"field": "RCSContributorType",
							"tag": "copy process",
							"target_field": "RCSSourceType"
						}
					},
					{
						"substring": {
							"field": "RCSContributorTypeLeafML",
							"tag": "copy process",
							"target_field": "RCSSourceTypeLeafML"
						}
					},
					{
						"substring": {
							"field": "RCSContributorTypeGenealogy",
							"tag": "copy process",
							"target_field": "RCSSourceTypeGenealogy"
						}
					},
					{
						"substring": {
							"field": "RCSContributorTypeLeaf",
							"tag": "copy process",
							"target_field": "RCSSourceTypeLeaf"
						}
					},
					{
						"rules": {
							"dependency": "doc.ContributorLocationCityName!=null && doc.ContributorLocationCityName.contains(\'__\')",
							"tag": "rules",
							"target_field": "ContributorLocationCityName",
							"target_rule": "doc.ContributorLocationCityName.split(\'__\')[1]"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "ConcatCcyCode",
							"target_rule": "if(doc.FirstCurrency!=null && doc.SecondCurrency!=null && doc.FirstCurrency != \'\' && doc.SecondCurrency != \'\') doc.FirstCurrency + doc.SecondCurrency + \' \' + doc.SecondCurrency + doc.FirstCurrency;"
						}
					},
					{
						"rules": {
							"dependency": "StirsUDF.isTermMaturity(doc.TenorType)",
							"tag": "rules",
							"target_field": "RCSTermMaturityRank",
							"target_rule": "if(doc.RCSInstrTenorRank != null && doc.RCSInstrTenorRank != \'\') doc.RCSInstrTenorRank; else \'9999\'"
						}
					},
					{
						"rules": {
							"dependency": "!StirsUDF.isTermMaturity(doc.TenorType)",
							"tag": "rules",
							"target_field": "RCSTermMaturityRank",
							"target_rule": "if(doc.RCSStructTenorRank != null && doc.RCSStructTenorRank != \'\') doc.RCSStructTenorRank; else \'9999\'"
						}
					},
					{
						"rules": {
							"dependency": "!StirsUDF.isTermMaturity(doc.TenorType)",
							"tag": "rules",
							"target_field": "RCSTermStartRank",
							"target_rule": "if(doc.RCSInstrTenorRank != null && doc.RCSInstrTenorRank != \'\') doc.RCSInstrTenorRank; else \'9999\'"
						}
					},
					{
						"rules": {
							"dependency": "StirsUDF.isTermMaturity(doc.TenorType)",
							"tag": "rules",
							"target_field": "RCSTermStartRank",
							"target_rule": "if(doc.RCSStructTenorRank != null && doc.RCSStructTenorRank != \'\') doc.RCSStructTenorRank; else \'9999\'"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSPrimaryCurrency",
							"target_rule": "if(doc.RCSFirstCurrency != null && doc.RCSFirstCurrency != \'\' && doc.RCSFirstCurrency != \'C:6\') doc.RCSFirstCurrency + \'\';"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RCSPrimaryCurrencyValue",
							"target_rule": "if(doc.RCSFirstCurrency != null && doc.RCSFirstCurrency != \'\' && doc.RCSFirstCurrency != \'C:6\') (doc.RCSFirstCurrency + \'\').substring(2);"
						}
					},
					{
						"rules": {
							"dependency": "!CommonUDF.exists(doc.RCSPrimaryCurrency)",
							"tag": "rules",
							"target_field": "RCSPrimaryCurrency",
							"target_rule": "if(doc.RCSSecondCurrency != null && doc.RCSSecondCurrency != \'\' && doc.RCSSecondCurrency != \'C:6\') doc.RCSSecondCurrency + \'\';"
						}
					},
					{
						"rules": {
							"dependency": "!CommonUDF.exists(doc.RCSPrimaryCurrencyValue)",
							"tag": "rules",
							"target_field": "RCSPrimaryCurrencyValue",
							"target_rule": "if(doc.RCSSecondCurrency != null && doc.RCSSecondCurrency != \'\' && doc.RCSSecondCurrency != \'C:6\') (doc.RCSSecondCurrency + \'\').substring(2);"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "SB",
							"target_rule": "(doc.FirstCurrency + \' \' + doc.SecondCurrency).trim()"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "SB",
							"target_rule": "if(doc.RCSAssetCategoryGenealogy != null && doc.RCSAssetCategoryGenealogy.contains(\'I:13\')) doc.SB + \' Fixing\'; else doc.SB;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "SubjectBoost",
							"target_rule": "if (doc.RIC != null && doc.RIC == \'GBP=\') doc.SB + \' Cable\'; else doc.SB"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "SearchAllCategory",
							"target_rule": "if(doc.RCSAssetCategoryGenealogy != null && doc.RCSAssetCategoryGenealogy.contains(\'A:2W\')) \'OTC Interest Rate Derivatives\'; else if(doc.RCSAssetCategoryGenealogy != null) \'FX & Money\'; else \'Bond Repos\';"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "SearchAllCategoryv2",
							"target_rule": "doc.SearchAllCategory"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "SearchAllCategoryv3",
							"target_rule": "doc.SearchAllCategory"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "CodeResolutionBase",
							"target_rule": "StringJoin.nonEmpty(\' \', doc.RIC, doc.PermID)"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "IsOffShoreStructure",
							"target_rule": "doc.IsOffShoreStructure == 1;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "IsOffShoreQuote",
							"target_rule": "doc.IsOffShoreQuote == 1;"
						}
					},
					{
						"rules": {
							"dependency": "CommonUDF.exists(doc.IsConvention)",
							"tag": "rules",
							"target_field": "IsConvention",
							"target_rule": "doc.IsConvention == 1;"
						}
					},
					{
						"rules": {
							"dependency": "CommonUDF.exists(doc.IsNonDeliverableStructure)",
							"tag": "rules",
							"target_field": "IsNonDeliverableStructure",
							"target_rule": "doc.IsNonDeliverableStructure == 1;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "IsExchangeTradable",
							"target_rule": "doc.IsExchangeTradable == \'Y\';"
						}
					},
					{
						"rules": {
							"dependency": "CommonUDF.exists(doc.ScalingFactorConvention)",
							"tag": "rules",
							"target_field": "ScalingFactorConvention",
							"target_rule": "Double.valueOf(doc.ScalingFactorConvention);"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "UnderlyingQuoteRIC",
							"target_rule": "StringJoin.nonEmpty(\'|\',doc.Leg1UnderlyingRIC,doc.Leg2UnderlyingRIC)"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "POPBase",
							"target_rule": "if (doc.PO == null) 99999; else doc.PO;"
						}
					},
					{
						"rules": {
							"tag": "rules",
							"target_field": "RICFilter",
							"target_rule": "StirsUDF.ricFilter(doc.RIC)"
						}
					},					
					{
						"document_title": {
							"asset_category": "QUOTE",
							"asset_types": ["STIR"],
							"config_root": "/project/catforsearch/config",							
							"config_type": "hdfs",
							"tag": "document_title"
						}
					},
					{
						"composites": {
							"tag": "composites",
							"config_root": "/project/catforsearch/config",
							"config_type": "hdfs",
							"asset_types": ["STIR"]
						}
					},
					{
						"x1x": {
							"asset_types": ["STIR"],
							"config_root": "/project/catforsearch/config",
							"config_type": "hdfs",
							"tag": "x1x"
						}
					},
					{
						"ricusage": {
							"config_root": "/project/catforsearch/config",
							"config_type": "hdfs",
							"tag": "ricusage"
						}
					},
					{
						"synonyms": {
							"asset_types": ["STIR"],
							"config_root": "/project/catforsearch/config",
							"config_type": "hdfs",
							"tag": "synonyms"
						}
					},
					{
						"petype": {
							"config_root": "/project/catforsearch/config",
							"config_type": "hdfs",
							"tag": "petype"
						}
					},
					{
						"staticrank": {
							"config_root": "/project/catforsearch/config",
							"config_type": "hdfs",
							"ignore_failure": true,
							"tag": "for rank"
						}
					}],
					"version": "1"
				},
				"plugins": [{
					"classname": "com.tr.pipeline.plugin.IngestSearchPlugin",
					"description": "plugin that holds search specific processors",
					"extraJarPath": "reserved",
					"version": "1.0"
				}]
			},
			"filter": "!(.PEType in [\"BRS\", \"GTW\", \"INH\", \"PRO\"]) && .RICFilter != \"Y\""
		}
	},
	"writer": [{
		"param": {
			"cluster": "ap-alpha-search",
			"enable-version": "false",
			"es-nodes": "10.206.148.21",
			"es-resource": "fxir_quote_03_flat/stir",
			"es-retrylimit": "9",
			"es-retrywait": "120s",
			"es-settings": {
				"description": "type <resource|hdfs>",
				"name": "stir2.json",
				"path": "/project/catforsearch/config/elasticsearch",
				"type": "hdfs"
			},
			"es-sleep": "500",
			"hadoopConfig": "/project/catforsearch/conf/hbase-site.xml",
			"metadataStore": {
				"columnFamily": "cf",
				"kafkaBroker": "10.235.8.191:9092,10.52.200.237:9092,10.52.201.200:9092",
				"kafkaTopic": "searchderivedstore",
				"storageType": "elastic",
				"tableName": "catforsearch:merge_MetadataStore"
			}
		},
		"writerType": "com.tr.output.elasticsearch.EsWriter"
	}]
}]